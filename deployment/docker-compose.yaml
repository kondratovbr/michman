#

# TODO: VERY IMPORTANT! Queue worker can easily make MySQL use 100% of available CPU when performing some heavy SQL queries.
#       Should make sure the app can still work while at it and it cannot be abused.

# TODO: Deploy policy is a stub. Make it to properly restart if failed and to use healthchecks.
# Default reusable deployment policy
x-deploy:
    &default-deploy
    mode: replicated
    replicas: 1
    restart_policy:
        condition: on-failure
        max_attempts: 3

# Reusable logging config
x-logging:
    &default-logging
    driver: "local"



services:

    nginx:
        image: nginx:1.21-alpine
        user: nginx
        command: ["nginx", "-c", "/etc/nginx/nginx-stage.conf", "-g", "daemon off;"]
        read_only: true
        ports:
            - '80:8080'
        volumes:
            - 'app-public:/home/app/michman/public:ro'
            - './nginx:/etc/nginx:ro'
            - /var/cache
            - /var/run
            - /tmp
        depends_on:
            - app
        deploy: *default-deploy
        logging: *default-logging

    app:
        # To reuse the whole base app service for other services, see below.
        &app-image
        image: kondorb/michman:0.9.0
        user: root
        read_only: true
        ports:
            - '8000:8000'
            - '8001:8001'
        volumes:
            - 'app-public:/home/app/michman/public:ro'
            - './.env.stage:/home/app/michman/.env:ro'
        depends_on:
            - mysql
            - redis
        deploy: *default-deploy
        logging: *default-logging
        healthcheck:
            test: ["CMD", "php", "artisan", "version"]

#     queue:
#         <<: *app-image
#         command: [
# #             "dockerize", "-wait", "tcp://redis:6379", "-wait", "tcp://bitcoind:8332", "-timeout", "5m", "--",
#             "php", "artisan", "queue:work",
#             "--queue", "default,providers,servers,broadcasting",
#             "--sleep", "3",
#             "--tries", "3",
#             "--timeout", "300",
#             "--backoff", "5",
#             "--memory", "256"
#         ]

#     scheduler:
#         <<: *app-image
#         # crond must be run as root.
#         user: root
#         command: [
# #             "dockerize", "-wait", "tcp://redis:6379", "-timeout", "60s", "--",
#             "crond", "-f"
#        ]

#     websockets:
#         <<: *app-image
#         command: 'php artisan websockets:serve'
#         ports:
#             - '6001:6001'

    mysql:
        image: mysql:8.0
        read_only: true
        environment:
            MYSQL_ROOT_PASSWORD: "password"
        volumes:
            - mysql-db:/var/lib/mysql
            - /run/mysqld
            - /tmp
            - './mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro'
        # TODO: CRITICAL! Make sure the actual database only exposed to localhost for SSH access.
        ports:
            - '3306:3306'
        logging: *default-logging
        deploy: *default-deploy
        healthcheck:
            test: ["CMD", "mysqladmin", "ping"]

    redis:
        image: redis:6-alpine
        read_only: true
        # Command is overridden to explicitly put in a config that has a password configured.
        command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
        volumes:
            - 'redis-data:/data'
            - './redis.stage.conf:/usr/local/etc/redis/redis.conf:ro'
        logging: *default-logging
        deploy: *default-deploy
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]



volumes:
    # Redis can store some data on disc.
    redis-data:
        driver: local
    # The actual MySQL database stored.
    mysql-db:
        driver: local
    # Application public directory with static assets.
    app-public:
        driver: local
