#

# TODO: VERY IMPORTANT! Queue worker can easily make MySQL use 100% of available CPU when performing some heavy SQL queries.
#       Should make sure the app can still work while at it and it cannot be abused.

# TODO: Deploy policy is a stub. Make it to properly restart if failed and to use healthchecks.
# Default reusable deployment policy
x-deploy:
    &default-deploy
    mode: replicated
    replicas: 1
    restart_policy:
        condition: unless-stopped

# Reusable logging config
x-logging:
    &default-logging
    driver: "local"



services:

    nginx:
        image: nginx:1.21-alpine
        user: nginx
        command: ["nginx", "-g", "daemon off;"]
        read_only: true
        ports:
            - '80:8080'
#            - '443:4443'
        volumes:
            # Public static assets
            - 'app-public:/home/app/michman/public:ro'
            # General config
            - './nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
            - './nginx/gzip.conf:/etc/nginx/gzip.conf:ro'
            - './nginx/mime.types:/etc/nginx/mime.types:ro'
            - './nginx/fastcgi_params:/etc/nginx/fastcgi_params:ro'
            # Staging-specific
            - './nginx/stage/app.conf:/etc/nginx/conf.d/app.conf:ro'
            - './nginx/stage/websockets.conf:/etc/nginx/conf.d/websockets.conf:ro'
            # Disposable volumes for temporary files
            - /var/cache
            - /var/run
            - /tmp
        depends_on:
            - app
        deploy: *default-deploy
        logging: *default-logging

    # Example commands to build and push this image:
    # docker image build --platform linux/amd64 -t kondorb/michman:XXX --build-arg APP_VERSION=XXX --build-arg SPARK_USERNAME=YYY --build-arg SPARK_PASSWORD=ZZZ .
    # docker image push kondorb/michman:XXX
    app:
        # To reuse the whole base app service for other services, see below.
        &app-image
        image: kondorb/michman:0.9.1
        platform: 'linux/amd64'
        read_only: true
        environment:
            APP_ENV: stage
        volumes:
            - 'app-public:/home/app/michman/public:ro'
            - './.env.stage:/home/app/michman/.env.stage:ro'
        depends_on:
            - mysql
            - redis
        deploy: *default-deploy
        logging: *default-logging
        healthcheck:
            test: ["CMD", "php", "artisan", "version"]

    queue:
        <<: *app-image
        command: [
#             "dockerize", "-wait", "tcp://redis:6379", "-timeout", "5m", "--",
            "php", "artisan", "horizon",
        ],
        stop_grace_period: 30m # This should be at least as long as the longest job is allowed to run.

    scheduler:
        <<: *app-image
        # crond must be run as root.
        user: root
        command: [
#            "dockerize", "-wait", "tcp://redis:6379", "-timeout", "60s", "--",
            "crond", "-f"
        ]

    websockets:
        <<: *app-image
        command: [
            "php", "artisan", "websockets:serve",
            "--port", "6001",
            "--host", "0.0.0.0",
        ]

    mysql:
        image: mysql:8.0
        read_only: true
        volumes:
            # Actual DB data
            - 'mysql-db:/var/lib/mysql'
            # Temporary directories needed to be writable to run read_only
            - '/run/mysqld'
            - '/tmp'
            # Customized config with some sane defaults
            - './mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro'
            # File with the root password for the initialization.
            - './mysql-root:/run/secrets/mysql-root'
        ports:
            - '127.0.0.1:3306:3306'
        environment:
            MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql-root
        logging: *default-logging
        deploy: *default-deploy
        healthcheck:
            test: ["CMD", "mysqladmin", "ping"]

    redis:
        image: redis:6-alpine
        read_only: true
        # Command is overridden to explicitly put in a config that has a password configured.
        command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
        volumes:
            - 'redis-data:/data'
            - './redis.stage.conf:/usr/local/etc/redis/redis.conf:ro'
        ports:
            - '127.0.0.1:6379:6379'
        logging: *default-logging
        deploy: *default-deploy
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]



volumes:
    # Redis can store some data on disc.
    redis-data:
        driver: local
    # The actual MySQL database stored.
    mysql-db:
        driver: local
    # Application public directory with static assets.
    app-public:
        driver: local
